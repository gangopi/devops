---
# Check whether the Jenkins service exists
- name: Check whether service exists
  stat: path=/etc/init.d/jenkins
  register: jenkins_service

# Stop the Jenkins service if it exists
- name: Stop Jenkins service
  service: name=jenkins state=stopped
  when: jenkins_service.stat.exists == true

# Configure Jenkins
- include_vars: secrets.yml
- include: configure.yml

# Make sure Jenkins starts, then configure Jenkins
- name: Wait for Jenkins to start up
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 60
  delay: 5
  changed_when: false
  args:
    warn: false

# Download Jenkins CLI jar
- name: Get the jenkins-cli jarfile from the Jenkins server
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10

# SSH keys directory
- name: Jenkins SSH keys directory
  file:
    path: "{{ jenkins_ssh_keys_dir }}"
    state: directory
    owner: jenkins
    mode: 0700

# Private/public key
- name: Jenkins public/private keys
  copy:
    content: "{{ item.content }}"
    dest: "{{ jenkins_ssh_keys_dir }}/{{ item.filename }}"
    owner: jenkins
    mode: 0600
  no_log: true
  with_items:
    - content: "{{ jenkins_public_key }}"
      filename: "{{ jenkins_ssh_public_key_file }}"
    - content: "{{ jenkins_private_key }}"
      filename: "{{ jenkins_ssh_private_key_file }}"

# Plugins
- include: plugins.yml

# Clean up
- name: Cleanup scripts and files
  file: path="{{ item }}", state=absent
  with_items:
    - "{{ jenkins_jar_location }}"
    - "{{ jenkins_rpm_location }}"
